name: Swift CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    name: Build and Test
    runs-on: macos-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        xcode: ['16.1']
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Select Xcode
      run: |
        if [[ "${{ matrix.xcode }}" =~ ^[0-9]+\.[0-9]+$ ]]; then
          sudo xcode-select -s "/Applications/Xcode_${{ matrix.xcode }}.app"
        else
          echo "Invalid Xcode version format"
          exit 1
        fi
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: Install xcpretty
      run: gem install xcpretty
    
    - name: Build whisper.cpp
      run: |
        echo "Building whisper.cpp for CI..."
        # Clone to the expected location
        mkdir -p ~/Developer
        cd ~/Developer
        git clone --depth 1 https://github.com/ggerganov/whisper.cpp
        cd whisper.cpp
        
        # Build with Metal support using cmake (creates proper directory structure)
        mkdir build
        cd build
        cmake .. -DWHISPER_METAL=ON -DWHISPER_BUILD_EXAMPLES=ON
        make -j
        
        # The cmake build creates whisper-cli in build/bin/
        echo "Verifying whisper-cli binary:"
        ls -la bin/whisper-cli
        
        # Verify required libraries are built
        echo "Verifying GGML libraries:"
        ls -la ggml/src/*.dylib
        echo "Verifying whisper library:"
        ls -la src/libwhisper*.dylib
    
    - name: Build
      run: |
        xcodebuild build -project WhisperKey/WhisperKey.xcodeproj \
          -scheme WhisperKey \
          -destination 'platform=macOS' \
          -configuration Release \
          ONLY_ACTIVE_ARCH=NO || true  # Continue even if sandbox blocks library copying
    
    - name: Copy Libraries Manually
      run: |
        # The build phase runs but sandbox blocks it in Release mode
        # So we copy libraries manually after the build
        cd WhisperKey
        
        # Find the built app
        APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "WhisperKey.app" -path "*/Release/*" | head -1)
        echo "Found app at: $APP_PATH"
        
        if [ -z "$APP_PATH" ]; then
          echo "Error: Could not find built app"
          exit 1
        fi
        
        # Get the parent directory for BUILT_PRODUCTS_DIR
        BUILT_PRODUCTS_DIR=$(dirname "$APP_PATH")
        
        # Run the copy script with the correct paths
        BUILT_PRODUCTS_DIR="$BUILT_PRODUCTS_DIR" \
        WRAPPER_NAME="WhisperKey.app" \
        ./copy-whisper-libraries.sh
        
        # Verify libraries were copied
        echo "Verifying bundled libraries:"
        ls -la "$APP_PATH/Contents/Frameworks/"*.dylib || echo "No libraries found"
        ls -la "$APP_PATH/Contents/MacOS/whisper-cli" || echo "whisper-cli not found"
    
    - name: Run Tests
      run: |
        xcodebuild test -project WhisperKey/WhisperKey.xcodeproj \
          -scheme WhisperKey \
          -destination 'platform=macOS' \
          -configuration Debug \
          -enableCodeCoverage YES \
          | xcpretty --test --color || exit 1
      continue-on-error: true

  swiftlint:
    name: SwiftLint
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: |
        swiftlint --reporter github-actions-logging
      continue-on-error: true